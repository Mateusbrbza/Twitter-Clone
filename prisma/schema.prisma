generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  username String? @unique
  bio String?
  email String? @unique
  emailVerified DateTime?
  image String?
  coverImage String?
  profileImage String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followingIds String[] @db.ObjectId
  hasNotification Boolean?
  posts Post[]
  comments Comment[]
  notifications Notification[]
  actedNotifications Notification[] @relation("Actor")
  sentPrivateMessages     PrivateMessage[] @relation("PrivateMessageSender")
  receivedPrivateMessages PrivateMessage[] @relation("PrivateMessageRecipient")
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  likedIds String[] @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  notifications Notification[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  postId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  userId String @db.ObjectId
  actorId String? @db.ObjectId
  type String
  postId String? @db.ObjectId
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  actor User? @relation("Actor", fields: [actorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PrivateMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  createdAt DateTime @default(now())
  senderId String @db.ObjectId
  sender User @relation("PrivateMessageSender", fields: [senderId], references: [id])
  recipientId String @db.ObjectId
  recipient User @relation("PrivateMessageRecipient", fields: [recipientId], references: [id])
}
